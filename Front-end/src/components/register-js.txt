// 2023/10/23 9.00PM

import React, { useState } from 'react';
import UserService from '../../services/UserService';
import './Register.css';
import { useNavigate } from 'react-router-dom';

function Register(props) {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    nic: '',
    address: '',
    dateOfBirth: '',
    age: '',
    gender: '',
    bloodGroup: '',
  });

  const navigate = useNavigate();
  const [errors, setErrors] = useState({});

  const validateForm = () => {
    const {
      firstName,
      lastName,
      nic,
      address,
      tp,
      dateOfBirth,
      age,
      gender,
      bloodGroup,
    } = formData;

    const newErrors = {};
    let isValid = true;

    if (!firstName) {
      newErrors.firstName = 'First Name is required';
      isValid = false;
    }

    if (!lastName) {
      newErrors.lastName = 'Last Name is required';
      isValid = false;
    }
    if (!nic) {
      newErrors.nic = 'NIC Number is required';
      isValid = false;
    }

    if (!tp) {
      newErrors.tp = 'Contact Number is required';
      isValid = false;
    }

    if (!address) {
      newErrors.address = 'Address is required';
      isValid = false;
    }

    if (!dateOfBirth) {
      newErrors.dateOfBirth = 'Date of Birth is required';
      isValid = false;
    }

    if (!age) {
      newErrors.age = 'Age is required';
      isValid = false;
    }

    if (!gender) {
      newErrors.gender = 'Gender is required';
      isValid = false;
    }

    if (!bloodGroup) {
      newErrors.bloodGroup = 'Blood Group is required';
      isValid = false;
    }
    
    if (nic){
      UserService.existsByNic(nic).then((resp) =>{
        console.log('NIC available in Database: ',resp.data);
        if(resp.data === false){
          console.log('Patient Created');
          isValid = true;
        } else{
          console.log('Patient not Created');
          newErrors.nic = 'NIC Number is already taken';
          isValid = false;
        }
      })
    }

    setErrors(newErrors);
    console.log('END');
    return isValid;
  };

  const navigateBack = () => {
    navigate(-1);
  };

  const savePatient = (e) => {
    e.preventDefault();
  
    if (validateForm()) {
      console.log('Form Validated');
      const patient = { ...formData };
  
      UserService.createPatient(patient)
        .then((res) => {
          // Patient created successfully, you can navigate or perform other actions
          navigate(-1);
        })
        .catch((error) => {
          console.error('Error creating patient: ', error);
          // You can display an error message to the user or perform other error handling here.
        });
    }
  };
  

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };


  return (
    
    <div className="container registration-form">
      <div className="title">
        <h2>Register Patient</h2>
      </div>
      <form>
        <div className="form-group">
          <label htmlFor="firstName">First Name:</label>
          <input
            type="text"
            id="firstName"
            name="firstName"
            value={formData.firstName}
            onChange={handleChange}
            className="form-control"
          />
          {errors.firstName && <div className="text-danger">{errors.firstName}</div>}
        </div>
        <div className="form-group">
          <label htmlFor="lastName">Last Name:</label>
          <input
            type="text"
            id="lastName"
            name="lastName"
            value={formData.lastName}
            onChange={handleChange}
            className="form-control"
          />
          {errors.lastName && <div className="text-danger">{errors.lastName}</div>}
        </div>
        <div className="form-group">
          <label htmlFor="nic">NIC Number:</label>
          <input
            type="text"
            id="nic"
            name="nic"
            value={formData.nic}
            onChange={handleChange}
            className="form-control"
          />
          {errors.nic && <div className="text-danger">{errors.nic}</div>}
          {/* {nicError && <div className="text-danger">{nicError}</div>} */}
        </div>
        <div className="form-group">
          <label htmlFor="address">Address:</label>
          <input
            type="text"
            id="address"
            name="address"
            value={formData.address}
            onChange={handleChange}
            className="form-control"
          />
          {errors.address && <div className="text-danger">{errors.address}</div>}
        </div>
        <div className="form-group">
          <label htmlFor="contactNumber">Contact Number:</label>
          <input
            type="text"
            id="contactNumber"
            name="contactNumber"
            value={formData.contactNumber}
            onChange={handleChange}
            className="form-control"
          />
          {errors.contactNumber && <div className="text-danger">{errors.contactNumber}</div>}
        </div>
        <div className="form-group">
          <label htmlFor="dateOfBirth">Date Of Birth:</label>
          <input
            type="date"
            id="dateOfBirth"
            name="dateOfBirth"
            value={formData.dateOfBirth}
            onChange={handleChange}
            className="form-control"
          />
          {errors.dateOfBirth && <div className="text-danger">{errors.dateOfBirth}</div>}
        </div>
        <div className="form-group">
          <label htmlFor="age">Age:</label>
          <input
            type="number"
            id="age"
            name="age"
            value={formData.age}
            onChange={handleChange}
            className="form-control"
          />
          {errors.age && <div className="text-danger">{errors.age}</div>}
        </div>
        <div className="form-group">
          <label htmlFor="gender">Gender:</label>
          <select
            id="gender"
            name="gender"
            value={formData.gender}
            onChange={handleChange}
            className="form-control"
          >
            <option value="">-Select Gender-</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Other">Other</option>
          </select>
          {errors.gender && <div className="text-danger">{errors.gender}</div>}
        </div>
        <div className="form-group">
          <label htmlFor="bloodGroup">Blood Group:</label>
          <input
            type="text"
            id="bloodGroup"
            name="bloodGroup"
            value={formData.bloodGroup}
            onChange={handleChange}
            className="form-control"
          />
          {errors.bloodGroup && <div className="text-danger">{errors.bloodGroup}</div>}
        </div>
        
        <div className="button-group">
        <br/>
          <button className="btn btn-primary" onClick={savePatient}>
            Save
          </button>
          <button className="btn btn-secondary" onClick={navigateBack}>Cancel</button>
        </div>
      </form> 
    </div>
  );
} 
  


export default Register;
